import json
import random
import string
import telebot
from telebot import types
from yoomoney import Quickpay, Client

TOKEN = ""
bot = telebot.TeleBot(TOKEN)
YOOMONEY_TOKEN = ""
ym_client = Client(YOOMONEY_TOKEN)

def purchase_coins(user_id, amount):
    label = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
    quickpay = Quickpay(
        receiver="–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
        quickpay_form="shop",
        targets="–ü–æ–∫—É–ø–∫–∞ NeuroCoin",
        paymentType="SB",
        sum=2,
        label=label
    )
    save_label(user_id, label)
    return quickpay.redirected_url, label

def save_label(user_id, label):
    data = load_data()
    if user_id in data:
        data[user_id]['label'] = label
        save_data(data)

def check_payment(user_id):
    data = load_data()
    if user_id in data and 'label' in data[user_id]:
        label = data[user_id]['label']
        history = ym_client.operation_history(label=label)
        if history.operations:
            return history.operations[0].amount
        return False

def generate_wallet_address():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))

def load_data():
    try:
        with open('bank_data.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open('bank_data.json', 'w') as file:
        json.dump(data, file, indent=4)

def notify_user(recipient_id, amount):
    bot.send_message(recipient_id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ NeuroCoin –Ω–∞ —Å—É–º–º—É {amount}.")

@bot.message_handler(commands=['getCoin'])
def start(message):
    try:
        command_parts = message.text.split(' ')
        if len(command_parts) < 2:
            bot.reply_to(message, "‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return
        coins_to_buy = int(command_parts[1])
        if coins_to_buy <= 0:
            bot.reply_to(message, "‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return
        user_id = str(message.from_user.id)
        url, label = purchase_coins(user_id, coins_to_buy)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment"))
        
        bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {coins_to_buy} –º–æ–Ω–µ—Ç: {url}", reply_markup=keyboard)

    except ValueError:
        bot.reply_to(message, "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")

    except Exception as e:
        bot.reply_to(message, f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == 'check_payment')
def check_payment_callback(call):
    user_id = str(call.from_user.id)
    amount = check_payment(user_id)
    data = load_data()
    if amount:
        label = data[user_id]['label']
        if label not in data[user_id]['processed_labels']:
            coins_bought = int(label.split('_')[0]) 
            data[user_id]['balance'] += coins_bought  
            data[user_id].setdefault('processed_labels', []).append(label) 
            save_data(data)
            bot.send_message(call.message.chat.id, f"–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {coins_bought} NeuroCoin.")
        else:
            bot.send_message(call.message.chat.id, "–≠—Ç–∞ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
    else:
        bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {'balance': 0, 'wallet_address': generate_wallet_address()}
        save_data(data)
    bot.reply_to(message, f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∏–Ω–∏-–±–∞–Ω–∫. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data[user_id]['balance']} NeuroCoin\nüíº –í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {data[user_id]['wallet_address']}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n/transfer [user id] [amount] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ NeuroCoin –Ω–∞ –¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª–µ–∫\n/all_users - –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/getCoin [amount] - –ö—É–ø–∏—Ç—å NeuroCoin")

@bot.message_handler(commands=['all_users'])
def show_all_users_data(message):
    data = load_data()
    if data:
        response = "üìã –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_id, user_data in data.items():
            response += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            response += f"–ë–∞–ª–∞–Ω—Å: {user_data['balance']} NeuroCoin\n"
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")

@bot.message_handler(commands=['balance'])
def balance(message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id in data:
        bot.reply_to(message, f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data[user_id]['balance']} NeuroCoin")
    else:
        bot.reply_to(message, "üòî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ.")

@bot.message_handler(commands=['transfer'])
def process_transfer(message):
    try:
        parts = message.text.split(' ')
        recipient_id = parts[1]
        amount = float(parts[2])

        user_id = str(message.from_user.id)
        data = load_data()

        if user_id not in data:
            bot.reply_to(message, "üòî –£ –≤–∞—Å –Ω–µ—Ç —Å—á–µ—Ç–∞ –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ.")
            return

        if amount <= 0:
            bot.reply_to(message, "‚ö†Ô∏è –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        if data[user_id]['balance'] < amount:
            bot.reply_to(message, "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.")
            return

        recipient_data = data.get(recipient_id)

        if not recipient_data:
            bot.reply_to(message, "üòî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        data[user_id]['balance'] -= amount
        recipient_data['balance'] += amount
        save_data(data)

        bot.reply_to(message, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} NeuroCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data[user_id]['balance']} NeuroCoin")

        notify_user(recipient_id, amount)
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: /transfer [id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Å—É–º–º–∞]")


if __name__ == '__main__':
    bot.polling()
